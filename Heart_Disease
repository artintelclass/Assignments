{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import tensorflow.contrib.keras as keras\n",
    "from keras.datasets import mnist\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense\n",
    "from keras.layers import Dropout\n",
    "from keras import initializers\n",
    "from keras import optimizers\n",
    "from keras.optimizers import SGD\n",
    "from keras.wrappers.scikit_learn import KerasClassifier\n",
    "from sklearn.model_selection import RandomizedSearchCV, ParameterGrid\n",
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Cleaning NANs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df = pd.read_csv(\"data.csv\", header=None, index_col=False)\n",
    "df = df.replace('?', np.nan)\n",
    "for i in range(14):\n",
    "    median = pd.to_numeric(df[i].dropna()).median()\n",
    "    df[i] = df[i].fillna(median)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Preparing data for ML"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(299, 2)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train, test = train_test_split(df, test_size=0.01)\n",
    "\n",
    "y_train = np.asfarray(train[13].astype('category').to_frame())\n",
    "x_train = np.asfarray(train.drop([13], axis=1).astype('float32'))\n",
    "y_test = np.asfarray(test[13].astype('category').to_frame())\n",
    "x_test = np.asfarray(test.drop([13], axis=1).astype('float32'))\n",
    "\n",
    "#binary classes\n",
    "y_train = np.clip(y_train, None, 1)\n",
    "y_test = np.clip(y_test, None, 1)\n",
    "\n",
    "# convert class vectors to binary class matrices\n",
    "num_classes = 2\n",
    "y_train = keras.utils.to_categorical(y_train, num_classes)\n",
    "y_test = keras.utils.to_categorical(y_test, num_classes)\n",
    "y_train.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Training"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "epochs = 100\n",
    "num_input_nodes = 13\n",
    "batch_size = 2\n",
    "\n",
    "param_grid = {\n",
    "    'nodes': [1000], \n",
    "    'lr': [0.2],  \n",
    "    'activation1':['relu'], \n",
    "    'activation2':['softmax'], #'relu', 'sigmoid', \n",
    "    'loss':['poisson'],\n",
    "    'opt_indx':[0],#,1,2], #AdaDelta, Adagrad, RMSprop\n",
    "    'bias1':[True],\n",
    "    'bias2':[False],\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def build_model(nodes,lr,batch_size,activation1,activation2,loss,opt_indx,bias1,bias2):\n",
    "    model = Sequential() # means we have layers that are stacked on each other in sequence\n",
    "    model.add(Dense(nodes, activation=activation1, input_shape=(num_input_nodes,), \n",
    "                    use_bias=bias1))\n",
    "    model.add(Dense(num_classes, activation=activation2, use_bias=bias2))\n",
    "    \n",
    "    opt_list = [optimizers.Adadelta(lr=lr), optimizers.Adagrad(lr=lr),optimizers.RMSprop(lr=lr)] \n",
    "    model.compile(loss=loss,\n",
    "                  optimizer=opt_list[opt_indx],\n",
    "                  metrics=['accuracy'])\n",
    "    return(model)\n",
    "\n",
    "model = KerasClassifier(build_fn=build_model, epochs=epochs,batch_size=batch_size,verbose=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 3 folds for each of 1 candidates, totalling 3 fits\n",
      "[CV] opt_indx=0, nodes=1000, lr=0.2, loss=poisson, bias2=False, bias1=True, activation2=softmax, activation1=relu \n",
      "[CV]  opt_indx=0, nodes=1000, lr=0.2, loss=poisson, bias2=False, bias1=True, activation2=softmax, activation1=relu, total=  29.3s\n",
      "[CV] opt_indx=0, nodes=1000, lr=0.2, loss=poisson, bias2=False, bias1=True, activation2=softmax, activation1=relu \n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:   29.5s remaining:    0.0s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV]  opt_indx=0, nodes=1000, lr=0.2, loss=poisson, bias2=False, bias1=True, activation2=softmax, activation1=relu, total=  30.0s\n",
      "[CV] opt_indx=0, nodes=1000, lr=0.2, loss=poisson, bias2=False, bias1=True, activation2=softmax, activation1=relu \n",
      "[CV]  opt_indx=0, nodes=1000, lr=0.2, loss=poisson, bias2=False, bias1=True, activation2=softmax, activation1=relu, total=  31.2s\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=1)]: Done   3 out of   3 | elapsed:  1.5min finished\n"
     ]
    }
   ],
   "source": [
    "dist = RandomizedSearchCV(estimator=model, param_distributions=param_grid, n_iter=1, cv=3,\n",
    "                    n_jobs=1, refit=True, verbose=2)\n",
    "dist_result = dist.fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model with rank: 1\n",
      "Mean validation score: 0.813 (std: 0.049)\n",
      "Parameters: {'opt_indx': 0, 'nodes': 1000, 'lr': 0.2, 'loss': 'poisson', 'bias2': False, 'bias1': True, 'activation2': 'softmax', 'activation1': 'relu'}\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Utility function to report best scores\n",
    "def report(results, n_top=3):\n",
    "    with open(\"hello.txt\", \"w\") as f: \n",
    "        for i in range(1, n_top + 1):\n",
    "            candidates = np.flatnonzero(results['rank_test_score'] == i)\n",
    "            for candidate in candidates:\n",
    "                f.write(\"Model with rank: {0} \\n\".format(i))\n",
    "                print(\"Model with rank: {0}\".format(i))\n",
    "                \n",
    "                f.write(\"Mean validation score: {0:.3f} (std: {1:.3f}) \\n\".format(\n",
    "                      results['mean_test_score'][candidate],\n",
    "                      results['std_test_score'][candidate]))\n",
    "                print(\"Mean validation score: {0:.3f} (std: {1:.3f})\".format(\n",
    "                      results['mean_test_score'][candidate],\n",
    "                      results['std_test_score'][candidate]))\n",
    "                \n",
    "                f.write(\"Parameters: {0} \\n\".format(results['params'][candidate]))\n",
    "                print(\"Parameters: {0}\".format(results['params'][candidate]))\n",
    "                \n",
    "                f.write(\"\\n\")\n",
    "                print(\"\")\n",
    "report(dist.cv_results_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
